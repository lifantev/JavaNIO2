THE JavaÂ® programming language is a general-purpose, concurrent, classbased, object-oriented language.
It is designed to be simple enough that many
programmers can achieve fluency in the language. The Java programming language
is related to C and C++ but is organized rather differently, with a number of aspects
of C and C++ omitted and a few ideas from other languages included. It is intended
to be a production language, not a research language, and so, as C. A. R. Hoare
suggested in his classic paper on language design, the design has avoided including
new and untested features.
The Java programming language is strongly and statically typed. This specification
clearly distinguishes between the compile-time errors that can and must be detected
at compile time, and those that occur at run time. Compile time normally consists
of translating programs into a machine-independent byte code representation.
Run-time activities include loading and linking of the classes needed to execute
a program, optional machine code generation and dynamic optimization of the
program, and actual program execution.
The Java programming language is a relatively high-level language, in that details
of the machine representation are not available through the language. It includes
automatic storage management, typically using a garbage collector, to avoid
the safety problems of explicit deallocation (as in C's free or C++'s delete).
High-performance garbage-collected implementations can have bounded pauses to
support systems programming and real-time applications. The language does not
include any unsafe constructs, such as array accesses without index checking, since
such unsafe constructs would cause a program to behave in an unspecified way.
The Java programming language is normally compiled to the bytecode instruction
set and binary format defined in The Java Virtual Machine Specification, Java SE
16 Edition.
1
1.1 Organization of the Specification INTRODUCTION
1.1 Organization of the Specification
Chapter 2 describes grammars and the notation used to present the lexical and
syntactic grammars for the language.
Chapter 3 describes the lexical structure of the Java programming language, which
is based on C and C++. The language is written in the Unicode character set. It
supports the writing of Unicode characters on systems that support only ASCII.
Chapter 4 describes types, values, and variables. Types are subdivided into
primitive types and reference types.
The primitive types are defined to be the same on all machines and in all
implementations, and are various sizes of two's-complement integers, IEEE 754
floating-point numbers, a boolean type, and a Unicode character char type. Values
of the primitive types do not share state.
Reference types are the class types, the interface types, and the array types. The
reference types are implemented by dynamically created objects that are either
instances of classes or arrays. Many references to each object can exist. All objects
(including arrays) support the methods of the class Object, which is the (single)
root of the class hierarchy. A predefined String class supports Unicode character
strings. Classes exist for wrapping primitive values inside of objects. In many cases,
wrapping and unwrapping is performed automatically by the compiler (in which
case, wrapping is called boxing, and unwrapping is called unboxing). Classes
and interfaces may be generic, that is, they may be parameterized by reference
types. Parameterized types of such classes and interfaces may then be invoked with
specific type arguments.
Variables are typed storage locations. A variable of a primitive type holds a value
of that exact primitive type. A variable of a class type can hold a null reference or
a reference to an object that is an instance of the named class or any subclass of
that class. A variable of an interface type can hold a null reference or a reference
to an instance of any class that implements the named interface. A variable of an
array type can hold a null reference or a reference to an array. A variable of class
type Object can hold a null reference or a reference to any object, whether class
instance or array.
Chapter 5 describes conversions and numeric promotions. Conversions change the
compile-time type and, sometimes, the value of an expression. These conversions
include the boxing and unboxing conversions between primitive types and
reference types. Numeric promotions are used to convert the operands of a numeric
operator to a common type where an operation can be performed.